name: CI
env:
  GO111MODULE: on
on: ['push', 'pull_request']

concurrency:
  # Cancel the previous builds in the same PR.
  # Allow running concurrently for all non-PR commits.
  group: ci-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.x, 1.12.x, 1.13.x, 1.14.x, 1.15.x]
        platform: [ubuntu-latest]
        include:
          # include windows, but only with the latest Go version, since there
          # is very little in the library that is platform specific
          - go-version: 1.x
            platform: windows-latest

          # only update test coverage stats with the most recent go version on linux
          - go-version: 1.x
            platform: ubuntu-latest
            update-coverage: true
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v2

      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run go fmt
        if: runner.os != 'Windows'
        run: diff -u <(echo -n) <(gofmt -d -s .)

      - name: Ensure go generate produces a zero diff
        if: runner.os == 'Ubuntu' && ${{ matrix.go-version == '1.x' }}
        shell: bash
        run: go generate -x ./... && git diff --exit-code; code=$?; git checkout -- .; (exit $code)

      - name: Run go vet
        run: go vet ./...

      - name: Run go test
        run: go test -v -race -coverprofile coverage.txt -covermode atomic ./...

      - name: Run cmd tests
        run: |
          cd internal/app/dogma
          go test ./...

      - name: Upload coverage to Codecov
        if: ${{ matrix.update-coverage }}
        uses: codecov/codecov-action@v1
